services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-db_test}
      POSTGRES_USER: ${DB_USER:-db_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-db_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    command: ["/bin/sh", "/app/scripts/start-dev.sh"]
    volumes:
      - ./sample_data:/app/sample_data
      - static_volume:/vol/web/static
      - ./scripts/wait-for-it.sh:/app/scripts/wait-for-it.sh
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - POETRY_VIRTUALENVS_CREATE=false
    depends_on:
      - db
      - redis
    networks:
      - app-network

  celery:
    build:
      context: ./backend
    command:
      [
        "/bin/sh", "-c",
        "chmod +x /app/scripts/wait-for-it.sh && /app/scripts/wait-for-it.sh backend:8000 -- poetry run celery -A src.celery_app worker --loglevel=info"
      ]
    volumes:
      - ./backend:/app
      - ./scripts/wait-for-it.sh:/app/scripts/wait-for-it.sh
    env_file:
      - ./backend/.env
    environment:
      - POETRY_VIRTUALENVS_CREATE=false
      - PYTHONPATH=/app/src
    depends_on:
      - backend
      - redis
      - db
    networks:
      - app-network

  celery-beat:
    build:
      context: ./backend
    command:
      [
        "/bin/sh", "-c",
        "chmod +x /app/scripts/wait-for-it.sh && /app/scripts/wait-for-it.sh backend:8000 -- poetry run celery -A src.celery_app beat --loglevel=info"
      ]
    volumes:
      - ./backend:/app
      - ./scripts/wait-for-it.sh:/app/scripts/wait-for-it.sh
    env_file:
      - ./backend/.env
    environment:
      - POETRY_VIRTUALENVS_CREATE=false
      - PYTHONPATH=/app/src
    depends_on:
      - backend
      - redis
      - db
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
    ports:
      - "8080:80"
    volumes:
      - static_volume:/vol/web/static
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge
