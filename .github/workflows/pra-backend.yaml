name: Backend Unit Test Workflow

# This workflow is triggered via 'workflow_call' from another workflow.
on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version to be used for setting up the environment."
        required: true
        type: string
      debug:
        description: "Debug mode flag."
        required: true
        type: string
      container-init-script:
        description: "Startup script path to initialize the container environment."
        required: true
        type: string
      environment:
        description: "Deployment environment (e.g., testing, staging)."
        required: true
        type: string
      working-directory:
        description: "Project root directory (default: backend)."
        required: false
        type: string
        default: backend

# Default shell to be used for all run steps
defaults:
  run:
    shell: bash -eo pipefail {0}

jobs:
  unit-tests:
    name: Backend Unit Tests with Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      # Spin up PostgreSQL service for testing
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: db_test
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.sha }}

      - name: Install system dependencies
        uses: ./.github/actions/setup-system-deps
        with:
          packages: "build-essential libpq-dev"

      - name: Setup Python environment using Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ inputs.python-version }}
          poetry-groups: "--with=dev"
          cache-key-suffix: "-backend-tests"
          working-directory: ${{ inputs.working-directory }}

      - name: Validate required secrets for Codecov
        run: |
          missing_secrets=()

          if [ -z "${{ secrets.CODECOV_TOKEN }}" ]; then
            missing_secrets+=("CODECOV_TOKEN")
          fi

          if [ ${#missing_secrets[@]} -gt 0 ]; then
            echo "Missing required secrets: ${missing_secrets[*]}"
            echo "Coverage upload will fail without these secrets"
            exit 1
          fi
          echo "All required secrets are present"

      - name: Setup CI-specific environment variables
        uses: ./.github/actions/setup-ci-env
        with:
          container-init-script: ${{ inputs.container-init-script }}
          debug: ${{ inputs.debug }}
          environment: ${{ inputs.environment }}

      - name: Install extra test dependencies
        run: |
          poetry run pip install keyring pytest-xdist pytest-rerunfailures

      - name: Apply Django database migrations
        working-directory: ${{ inputs.working-directory }}
        run: |
          poetry run python src/manage.py migrate

      - name: Run unit tests and collect coverage
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Running tests using DB: $DB_NAME at $DB_HOST"
          poetry run pytest \
            --cov=. \
            --cov-config=.coveragerc \
            --cov-branch \
            --cov-report=xml:coverage.xml \
            . \
            -v \
            --tb=long \
            | tee /tmp/pytest.log

      - name: Verify if coverage.xml was generated
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Listing workspace directory:"
          ls -la
          echo "Displaying beginning of coverage.xml (if present):"
          head -n 20 coverage.xml || echo "coverage.xml not found"

      - name: Validate coverage report integrity
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f coverage.xml ]; then
            echo "ERROR: coverage.xml not found!"
            echo "Listing current directory contents:"
            ls -la
            exit 1
          fi

          if [ ! -s coverage.xml ]; then
            echo "ERROR: coverage.xml is empty!"
            exit 1
          fi

          # Check for well-formed XML
          if command -v xmllint >/dev/null 2>&1; then
            if ! xmllint --noout coverage.xml 2>/dev/null; then
              echo "ERROR: coverage.xml is not valid XML!"
              head -n 10 coverage.xml
              exit 1
            fi
          fi

          echo "Coverage report validation passed"

      - name: Upload coverage report to Codecov
        if: always() # Always run even if previous steps fail
        uses: codecov/codecov-action@v4
        with:
          file: ${{ inputs.working-directory }}/coverage.xml
          flags: unittests
          name: codecov-coverage-report
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
